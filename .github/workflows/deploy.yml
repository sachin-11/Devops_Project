name: CI/CD with Terraform
on:
  push:
    branches:
         - Complete-CI/CD-with-Terraform-AWS
env: 
   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
   TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_BUCKET_NAME }}
   PRIVATE_SSH_KEY: ${{secrets.AWS_SSH_KEY_PRIVATE}}
   PUBLIC_SSH_KEY: ${{secrets.AWS_SSH_KEY_PUBLIC}}
   AWS_REGION: ap-south-1

jobs:
    deploy-infra:
       runs-on: ubuntu-latest
       outputs:
          SERVER_PUBLIC_IP: ${{steps.set-ip.outputs.instance_public_ip}}
       steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
             teraaform_wrappers: false
        - name: Terraform init
          id: init 
          run:  terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=ap-south-1"  
          working-directory: './terraform'
        - name: Terraform Plan
          id: plan
          run: |-
            terraform plan \
            -var="region=ap-south-1" \
            -var="public_key=$PUBLIC_SSH_KEY" \
            -var="private_key=$PRIVATE_SSH_KEY" \
            -var="key_name=deployer-key1" \
            -out=PLAN
          working-directory: './terraform'
        - name: Terraform Apply
          id: apply 
          run: terraform apply PLAN
          working-directory: './terraform'
        - name: Set output
          id: set-ip
          run: |-
             echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
    deploy-app:
       runs-on: ubuntu-latest
       needs: deploy-infra
       steps:
          - name: Checkout
            uses: actions/checkout@v3
          - name: Set IP env variable
            run:  echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
          - name: Login to AWS ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1 
          - name: Build, push docker image
            env:
              REGISTRY: ${{steps.login-ecr.outputs.registry }} 
              REPOSITORY: example-node-app
              IMAGE_TAG: ${{github.sha}}  
            run: |-
              docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
              docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
            working-directory: './nodeapp'  
          - name: Deploy docker image to EC2
            env:
              REGCISTRY: ${{steps.login-ecr.outputs.registry }} 
              REPOSITORY: example-node-app
              IMAGE_TAG: ${{github.sha}} 
              AWS_DEFAULT_REGION: ap-south-1 
            uses: appleboy/ssh-action@master
            with:
              host: ${{ env.SERVER_PUBLIC_IP }}
              username: ubuntu
              key: ${{env.PRIVATE_SSH_KEY}}
              envs: PRIVATE_SSH_KEY,PRIVATE_SSH_KEY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_DEFAULT_REGION
              script: |-
                  sudo apt update
                  sudo apt install docker.io -y
                  sudo apt install awscli -y
                  sudo ${aws ecr get-login --no-include-email --region ap-south-1 };
                  sudo docker stop myappcontainer || true
                  sudo docker rm myappcontainer || true
                  sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
                  sudo docker run -d --name myappcontainer -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG  
    terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform destroy
          command: |
            cd deployment/
            terraform init
            terraform destroy -auto-approve